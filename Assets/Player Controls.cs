//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""241edb14-663f-4521-a8dc-0c4439d7e2cd"",
            ""actions"": [
                {
                    ""name"": ""Note1"",
                    ""type"": ""Button"",
                    ""id"": ""21b08c2b-8212-4464-a263-a37dce7817d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note2"",
                    ""type"": ""Button"",
                    ""id"": ""55092c48-1d00-4e1b-aa7b-c4d5b8e7f486"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note3"",
                    ""type"": ""Button"",
                    ""id"": ""6ce6c584-2680-428c-8130-5583bb8dcb9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note4"",
                    ""type"": ""Button"",
                    ""id"": ""9bebeb89-9ec4-4ed9-a70b-11de61bc836d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note5"",
                    ""type"": ""Button"",
                    ""id"": ""96de266b-8082-48cd-90c5-b5ba1a1fd48f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ae34726-dfc4-4a7d-9b89-5178e5d52cb9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36badf2e-f40d-4da9-8998-52e06c43fc6d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16dd2282-a32f-4c9d-9117-9a676a9065ec"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68d938cc-15c8-4a10-9340-d4ad24cffa2e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40ab7354-a8d4-4117-855d-aaa9bdd15d3c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Note1 = m_Gameplay.FindAction("Note1", throwIfNotFound: true);
        m_Gameplay_Note2 = m_Gameplay.FindAction("Note2", throwIfNotFound: true);
        m_Gameplay_Note3 = m_Gameplay.FindAction("Note3", throwIfNotFound: true);
        m_Gameplay_Note4 = m_Gameplay.FindAction("Note4", throwIfNotFound: true);
        m_Gameplay_Note5 = m_Gameplay.FindAction("Note5", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Note1;
    private readonly InputAction m_Gameplay_Note2;
    private readonly InputAction m_Gameplay_Note3;
    private readonly InputAction m_Gameplay_Note4;
    private readonly InputAction m_Gameplay_Note5;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Note1 => m_Wrapper.m_Gameplay_Note1;
        public InputAction @Note2 => m_Wrapper.m_Gameplay_Note2;
        public InputAction @Note3 => m_Wrapper.m_Gameplay_Note3;
        public InputAction @Note4 => m_Wrapper.m_Gameplay_Note4;
        public InputAction @Note5 => m_Wrapper.m_Gameplay_Note5;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Note1.started += instance.OnNote1;
            @Note1.performed += instance.OnNote1;
            @Note1.canceled += instance.OnNote1;
            @Note2.started += instance.OnNote2;
            @Note2.performed += instance.OnNote2;
            @Note2.canceled += instance.OnNote2;
            @Note3.started += instance.OnNote3;
            @Note3.performed += instance.OnNote3;
            @Note3.canceled += instance.OnNote3;
            @Note4.started += instance.OnNote4;
            @Note4.performed += instance.OnNote4;
            @Note4.canceled += instance.OnNote4;
            @Note5.started += instance.OnNote5;
            @Note5.performed += instance.OnNote5;
            @Note5.canceled += instance.OnNote5;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Note1.started -= instance.OnNote1;
            @Note1.performed -= instance.OnNote1;
            @Note1.canceled -= instance.OnNote1;
            @Note2.started -= instance.OnNote2;
            @Note2.performed -= instance.OnNote2;
            @Note2.canceled -= instance.OnNote2;
            @Note3.started -= instance.OnNote3;
            @Note3.performed -= instance.OnNote3;
            @Note3.canceled -= instance.OnNote3;
            @Note4.started -= instance.OnNote4;
            @Note4.performed -= instance.OnNote4;
            @Note4.canceled -= instance.OnNote4;
            @Note5.started -= instance.OnNote5;
            @Note5.performed -= instance.OnNote5;
            @Note5.canceled -= instance.OnNote5;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnNote1(InputAction.CallbackContext context);
        void OnNote2(InputAction.CallbackContext context);
        void OnNote3(InputAction.CallbackContext context);
        void OnNote4(InputAction.CallbackContext context);
        void OnNote5(InputAction.CallbackContext context);
    }
}
